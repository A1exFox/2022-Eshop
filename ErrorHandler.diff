diff --git a/www/public/errors/development.php b/www/public/errors/development.php
index caaa142..6bc3f4a 100644
--- a/www/public/errors/development.php
+++ b/www/public/errors/development.php
@@ -1,5 +1,12 @@
 <?php
 
+/**
+ * @var string $errno \wfm\ErrorHandler
+ * @var string $errstr \wfm\ErrorHandler
+ * @var string $errfile \wfm\ErrorHandler
+ * @var int $errline \wfm\ErrorHandler
+ */
+
 ?>
 <!doctype html>
 <html lang="en">
@@ -12,10 +19,10 @@
 <body>
 
     <h1>Произошла ошибка</h1>
-    <p><b>Код ошибки:</b></p>
-    <p><b>Текст ошибки:</b></p>
-    <p><b>Файл, в котором произошла ошибка:</b></p>
-    <p><b>Строка, в которой произошла ошибка:</b></p>
+    <p><b>Код ошибки:</b> <?= $errno ?></p>
+    <p><b>Текст ошибки:</b> <?= $errstr ?></p>
+    <p><b>Файл, в котором произошла ошибка:</b> <?= $errfile ?></p>
+    <p><b>Строка, в которой произошла ошибка:</b> <?= $errline ?></p>
 
 </body>
 
diff --git a/www/public/errors/production.php b/www/public/errors/production.php
index c8d3076..0b58f15 100644
--- a/www/public/errors/production.php
+++ b/www/public/errors/production.php
@@ -9,7 +9,7 @@
 <body>
 
     <h1>Произошла ошибка</h1>
-    <p><a href="">Go back to Home</a></p>
+    <p><a href="<?= PATH; ?>">Go back to Home</a></p>
 
 </body>
 
diff --git a/www/vendor/wfm/App.php b/www/vendor/wfm/App.php
index a6f00f5..3928371 100644
--- a/www/vendor/wfm/App.php
+++ b/www/vendor/wfm/App.php
@@ -10,6 +10,7 @@ class App
 
     public function __construct()
     {
+        new ErrorHandler();
         self::$app = Registry::getInstance();
         $this->getParams();
     }
diff --git a/www/vendor/wfm/ErrorHandler.php b/www/vendor/wfm/ErrorHandler.php
new file mode 100644
index 0000000..b39bc80
--- /dev/null
+++ b/www/vendor/wfm/ErrorHandler.php
@@ -0,0 +1,114 @@
+<?php
+
+declare(strict_types=1);
+
+namespace wfm;
+
+class ErrorHandler
+{
+    public function __construct()
+    {
+        if (DEBUG) {
+            error_reporting(-1);
+        } else {
+            error_reporting(0);
+        }
+        set_exception_handler([$this, 'exceptionHandler']);
+        set_error_handler([$this, 'errorHandler']);
+        ob_start();
+        register_shutdown_function([$this, 'fatalErrorHandler']);
+    }
+
+    public function errorHandler(
+        int $errno,
+        string $errstr,
+        string $errfile,
+        int $errline,
+    ): void {
+        $this->logError(
+            $errstr,
+            $errfile,
+            $errline
+        );
+        $this->displayError(
+            strval($errno),
+            $errstr,
+            $errfile,
+            $errline
+        );
+    }
+
+    public function fatalErrorHandler(): void
+    {
+        $error = error_get_last();
+        if (!empty($error) && $error['type'] & (E_ERROR | E_PARSE | E_COMPILE_ERROR | E_CORE_ERROR)) {
+            $this->logError(
+                $error['message'],
+                $error['file'],
+                $error['line']
+            );
+            ob_end_clean();
+            $this->displayError(
+                strval($error['type']),
+                $error['message'],
+                $error['file'],
+                $error['line']
+            );
+        } else {
+            ob_end_flush();
+        }
+    }
+
+    public function exceptionHandler(\Throwable $e): void
+    {
+        $this->logError(
+            $e->getMessage(),
+            $e->getFile(),
+            $e->getLine(),
+        );
+        $this->displayError(
+            "Exception",
+            $e->getMessage(),
+            $e->getFile(),
+            $e->getLine(),
+            $e->getCode(),
+        );
+    }
+
+    protected function logError(
+        string $message = '',
+        string $file = '',
+        int $line = 0,
+    ): void {
+        $filename = LOGS . '/errors.log';
+        if (!is_dir(LOGS)) {
+            mkdir(directory: LOGS, recursive: true);
+        }
+        $date = date("Y-m-d H:i:s");
+        $content = sprintf("%s: %s; File %s; Line %d\n", $date, $message, $file, $line);
+        file_put_contents($filename, $content, FILE_APPEND);
+    }
+
+    protected function displayError(
+        string $errno,
+        string $errstr = '',
+        string $errfile = '',
+        int $errline = 0,
+        int $response = 500
+    ): void {
+        if ($response == 0) {
+            $response = 404;
+        }
+        http_response_code($response);
+        if ($response == 404 && DEBUG == 0) {
+            require_once WWW . '/errors/404.php';
+            die;
+        }
+        if (DEBUG == 1) {
+            require WWW . '/errors/development.php';
+        } else {
+            require WWW . '/errors/production.php';
+        }
+        die;
+    }
+}
